# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import gcode_pb2 as gcode__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gcode_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GcodeParserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.toString = channel.unary_unary(
                '/qsp.gcode.GcodeParser/toString',
                request_serializer=gcode__pb2.Block.SerializeToString,
                response_deserializer=gcode__pb2.Line.FromString,
                _registered_method=True)
        self.parse = channel.unary_unary(
                '/qsp.gcode.GcodeParser/parse',
                request_serializer=gcode__pb2.Line.SerializeToString,
                response_deserializer=gcode__pb2.Block.FromString,
                _registered_method=True)


class GcodeParserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def toString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def parse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GcodeParserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'toString': grpc.unary_unary_rpc_method_handler(
                    servicer.toString,
                    request_deserializer=gcode__pb2.Block.FromString,
                    response_serializer=gcode__pb2.Line.SerializeToString,
            ),
            'parse': grpc.unary_unary_rpc_method_handler(
                    servicer.parse,
                    request_deserializer=gcode__pb2.Line.FromString,
                    response_serializer=gcode__pb2.Block.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qsp.gcode.GcodeParser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qsp.gcode.GcodeParser', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GcodeParser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def toString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qsp.gcode.GcodeParser/toString',
            gcode__pb2.Block.SerializeToString,
            gcode__pb2.Line.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qsp.gcode.GcodeParser/parse',
            gcode__pb2.Line.SerializeToString,
            gcode__pb2.Block.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CNCMachineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.run = channel.stream_unary(
                '/qsp.gcode.CNCMachine/run',
                request_serializer=gcode__pb2.Block.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.run_one = channel.unary_unary(
                '/qsp.gcode.CNCMachine/run_one',
                request_serializer=gcode__pb2.Block.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.run_program = channel.unary_unary(
                '/qsp.gcode.CNCMachine/run_program',
                request_serializer=gcode__pb2.Program.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class CNCMachineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def run(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def run_one(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def run_program(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CNCMachineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'run': grpc.stream_unary_rpc_method_handler(
                    servicer.run,
                    request_deserializer=gcode__pb2.Block.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'run_one': grpc.unary_unary_rpc_method_handler(
                    servicer.run_one,
                    request_deserializer=gcode__pb2.Block.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'run_program': grpc.unary_unary_rpc_method_handler(
                    servicer.run_program,
                    request_deserializer=gcode__pb2.Program.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qsp.gcode.CNCMachine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qsp.gcode.CNCMachine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CNCMachine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def run(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/qsp.gcode.CNCMachine/run',
            gcode__pb2.Block.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def run_one(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qsp.gcode.CNCMachine/run_one',
            gcode__pb2.Block.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def run_program(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qsp.gcode.CNCMachine/run_program',
            gcode__pb2.Program.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GcodeDictionaryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.enumerate = channel.unary_stream(
                '/qsp.gcode.GcodeDictionary/enumerate',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=gcode__pb2.Command.FromString,
                _registered_method=True)
        self.describe = channel.unary_unary(
                '/qsp.gcode.GcodeDictionary/describe',
                request_serializer=gcode__pb2.Block.SerializeToString,
                response_deserializer=gcode__pb2.Command.FromString,
                _registered_method=True)


class GcodeDictionaryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def enumerate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GcodeDictionaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'enumerate': grpc.unary_stream_rpc_method_handler(
                    servicer.enumerate,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=gcode__pb2.Command.SerializeToString,
            ),
            'describe': grpc.unary_unary_rpc_method_handler(
                    servicer.describe,
                    request_deserializer=gcode__pb2.Block.FromString,
                    response_serializer=gcode__pb2.Command.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qsp.gcode.GcodeDictionary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qsp.gcode.GcodeDictionary', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GcodeDictionary(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def enumerate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/qsp.gcode.GcodeDictionary/enumerate',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            gcode__pb2.Command.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def describe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qsp.gcode.GcodeDictionary/describe',
            gcode__pb2.Block.SerializeToString,
            gcode__pb2.Command.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
